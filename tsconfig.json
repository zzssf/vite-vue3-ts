/** https://cn.vitejs.dev/guide/features.html#typescript-compiler-options */
{
  "compilerOptions": {
    "target": "esnext", // 设置ECMAScript目标版本为最新版本
    "useDefineForClassFields": true, // 使用Object.defineProperty来定义类字段
    "module": "esnext", // 设置模块化系统为最新的ECMAScript模块化系统
    "moduleResolution": "bundler", // 设置模块解析策略为打包工具（如Vite）解析
    "strict": true, // 启用所有TypeScript严格类型检查选项
    "jsx": "preserve", // 设置JSX代码的生成方式为保留JSX代码，不进行编译
    "jsxImportSource": "vue", // 设置JSX工厂函数和碎片导入的来源为Vue
    "importHelpers": true, // 从"tslib"库中导入帮助函数，以减少代码体积
    "experimentalDecorators": true, // 启用实验性的装饰器特性
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块中默认导入
    "sourceMap": true, // 生成source map文件，以便调试
    "resolveJsonModule": true, // 允许导入.json文件
    "isolatedModules": true, // 确保每个文件都可以独立编译，这是Vite等工具的要求
    "esModuleInterop": true, // 启用ES模块的互操作性，以允许CommonJS和ES模块之间的互操作
    "lib": ["esnext", "dom"], // 指定要包含在编译中的库文件，包括最新的ECMAScript功能和DOM库
    "skipLibCheck": true, // 跳过对声明文件的类型检查
    "types": ["vite/client"], // 指定要包含的类型声明文件，包括Vite客户端的类型
    "baseUrl": ".", // baseUrl 用来告诉编译器到哪里去查找模块，使用非相对模块时必须配置此项
    "paths": {
      "@/*": ["src/*"] // 非相对模块导入的路径映射配置，根据 baseUrl 配置进行路径计算
    }
  },
  "include": [
    "mock/**/*",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "vite.config.ts"
  ],
  "exclude": ["node_modules", "dist"]
}
